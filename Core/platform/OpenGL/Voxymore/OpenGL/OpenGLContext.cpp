//
// Created by ianpo on 19/07/2023.
//

#include "OpenGLContext.hpp"
#include "Voxymore/Core/Logger.hpp"
#include "glad/glad.h"
#include "GLFW/glfw3.h"


namespace Voxymore::Core {

    static inline const char* GetMessageSourceStr(GLenum source) {
        switch (source) {
            case GL_DEBUG_SOURCE_API: return "GL_DEBUG_SOURCE_API"  ;// 	Calls to the OpenGL API
            case GL_DEBUG_SOURCE_WINDOW_SYSTEM: return "GL_DEBUG_SOURCE_WINDOW_SYSTEM"  ;// 	Calls to a window-system API
            case GL_DEBUG_SOURCE_SHADER_COMPILER: return "GL_DEBUG_SOURCE_SHADER_COMPILER"  ;// 	A compiler for a shading language
            case GL_DEBUG_SOURCE_THIRD_PARTY: return "GL_DEBUG_SOURCE_THIRD_PARTY"  ;// 	An application associated with OpenGL
            case GL_DEBUG_SOURCE_APPLICATION: return "GL_DEBUG_SOURCE_APPLICATION"  ;// 	Generated by the user of this application
            case GL_DEBUG_SOURCE_OTHER: return "GL_DEBUG_SOURCE_OTHER"  ;// 	Some source that isn't one of these
        }
        return "UNKNOWN";
    }
    static inline const char* GetMessageTypeStr(GLenum type) {
        switch (type) {
            case GL_DEBUG_TYPE_ERROR: return "GL_DEBUG_TYPE_ERROR"; // 	An error, typically from the API
            case GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: return "GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR"; // 	Some behavior marked deprecated has been used
            case GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR: return "GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR"; // 	Something has invoked undefined behavior
            case GL_DEBUG_TYPE_PORTABILITY: return "GL_DEBUG_TYPE_PORTABILITY"; // 	Some functionality the user relies upon is not portable
            case GL_DEBUG_TYPE_PERFORMANCE: return "GL_DEBUG_TYPE_PERFORMANCE"; // 	Code has triggered possible performance issues
            case GL_DEBUG_TYPE_MARKER: return "GL_DEBUG_TYPE_MARKER"; // 	Command stream annotation
            case GL_DEBUG_TYPE_PUSH_GROUP: return "GL_DEBUG_TYPE_PUSH_GROUP"; // 	Group pushing
            case GL_DEBUG_TYPE_POP_GROUP: return "GL_DEBUG_TYPE_POP_GROUP"; // 	Group popping
            case GL_DEBUG_TYPE_OTHER: return "GL_DEBUG_TYPE_OTHER"; // 	Some type that isn't one of these
        }
        return "UNKNOWN";
    }

    static inline void OnOpenglMessageCallback(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *message, const void *userParam) {
        switch (severity) {
            case GL_DEBUG_SEVERITY_HIGH:
            {
                VXM_CORE_ERROR("[OpenGL] [{}] [{}] [{}] - {}", GetMessageSourceStr(source), GetMessageTypeStr(type), id, message);
                VXM_BREAK();
                break;
            }
            case GL_DEBUG_SEVERITY_MEDIUM:
            {
                VXM_CORE_WARNING("[OpenGL] [{}] [{}] [{}] - {}", GetMessageSourceStr(source), GetMessageTypeStr(type), id, message);
                VXM_BREAK();
                break;
            }
            case GL_DEBUG_SEVERITY_LOW:
            {
                VXM_CORE_INFO("[OpenGL] [{}] [{}] [{}] - {}", GetMessageSourceStr(source), GetMessageTypeStr(type), id, message);
                VXM_BREAK();
                break;
            }
            default /*GL_DEBUG_SEVERITY_NOTIFICATION*/ :
            {
                VXM_CORE_TRACE("[OpenGL] [{}] [{}] [{}] - {}", GetMessageSourceStr(source), GetMessageTypeStr(type), id, message);
                VXM_BREAK();
                break;
            }
        }
    }

    OpenGLContext::OpenGLContext(GLFWwindow *windowHandle) : m_WindowHandle(windowHandle) {
    }

    OpenGLContext::~OpenGLContext() {
    }

    void OpenGLContext::Init() {
        VXM_PROFILE_FUNCTION();
        glfwMakeContextCurrent(m_WindowHandle);
        int status = gladLoadGLLoader((GLADloadproc) glfwGetProcAddress);
        VXM_CORE_INFO("glad loading status: {0}", status);

        VXM_CORE_INFO("OpenGL Info:");
        VXM_CORE_INFO("  Vendor: {0}", (const char*)glGetString(GL_VENDOR));
        VXM_CORE_INFO("  Renderer: {0}", (const char*)glGetString(GL_RENDERER));
        VXM_CORE_INFO("  Version: {0}", (const char*)glGetString(GL_VERSION));

#ifdef VXM_DEBUG
        GLint ContextFlags;
        glGetIntegerv(GL_CONTEXT_FLAGS, &ContextFlags);

        if (ContextFlags & GL_CONTEXT_FLAG_DEBUG_BIT)
        {
            VXM_CORE_INFO("[OpenGL] Debug Context Is Enabled");
            glEnable              ( GL_DEBUG_OUTPUT );
            glDebugMessageCallback(&OnOpenglMessageCallback, nullptr);
        }
        else {
            VXM_CORE_INFO("[OpenGL] Debug Context Is Disabled");
        }
#endif
    }

    void OpenGLContext::SwapBuffers() {
        VXM_PROFILE_FUNCTION();
        glfwSwapBuffers(m_WindowHandle);
    }
} // Voxymore
// Core
