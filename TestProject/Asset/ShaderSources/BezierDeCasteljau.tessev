#version 450 core

#define ALPHA_MODE_OPAQUE 0
#define ALPHA_MODE_MASK 1
#define ALPHA_MODE_BLEND 2

#define MAX_LIGHT_COUNT 20
#define EPSILON 0.1

struct TextureInfo
{
    int Index;
    int TexCoord;
};

struct NormalTextureInfo
{
    int Index;
    int TexCoord;
    float Scale;
};

struct OcclusionTextureInfo
{
    int Index;
    int TexCoord;
    float Strenght;
};

struct MetallicRoughtness
{
    vec4 BaseColorFactor;
    TextureInfo BaseColorTexture;
    float MetallicFactor;
    float RoughtnessFactor;
    TextureInfo MetallicRoughnessTexture;
};

struct MaterialParams
{
    MetallicRoughtness PbrMetallicRoughness;
    NormalTextureInfo NormalTexture;
    OcclusionTextureInfo OcclusionTexture;
    TextureInfo EmissiveTexture;
    vec4 EmissiveFactor;
    int AlphaMode; // Opaque = 0, Mask = 1, Blend = 2,
    float AlphaCutoff;
    int DoubleSided;
};

struct Light
{
    vec4 Color;
    vec4 Position;
    vec4 Direction;
    float Range;
    float Intensity;
    float Cutoff;
    int Type; //0 = Directional ; 1 = Point ; 2 = Spot
};

struct LightData
{
    Light lights[MAX_LIGHT_COUNT];
//    Light lights;
    int lightCount;
};

layout(std140, binding = 0) uniform Camera
{
    mat4 u_ViewProjectionMatrix;
    vec4 u_CameraPosition;
    vec4 u_CameraDirection;
};

layout(std140, binding = 1) uniform Model
{
    mat4 u_ModelMatrix;
    mat4 u_NormalMatrix;
    int u_EntityId;
};

layout(std140, binding = 2) uniform Lights
{
    LightData lights;
};

layout(std140, binding = 3) uniform MaterialParameters
{
    MaterialParams materialParameters;
};

layout(std140, binding = 4) uniform CurveParameters
{
    int u_NumberOfSegment;
    int u_NumberControlPoint; // 4 by default.
};

layout(isolines) in;

float binomialCoeff(int n, int k) {
    float coeff = 1.0;
    int j;
    for (j = 1; j <= k; j++) {
        coeff *= float(n - (k - j)) / float(j);
    }
    return coeff;
}

void main() {
    float t = gl_TessCoord.x; // Valeur de t variant de 0 à 1 pour le calcul de la position sur la courbe


    vec3 tmp[32];
    int count = min(32, u_NumberControlPoint);

    for(int i = 0; i < count; i++)
    {
        tmp[i] = gl_in[i].gl_Position.xyz;
    }

    vec3 p = tmp[0];

    vec3 finalPos = vec3(0.0);
    for (int i = 0; i < count; ++i) {
        float binom = binomialCoeff(3, i);
        float bernstein = binom * pow(1.0 - t, float(count - 1 - i)) * pow(t, float(i));
        finalPos += tmp[i] * bernstein;
    }

    // Calcul de la position finale du point sur la courbe dans l'espace de la caméra
    gl_Position = u_ViewProjectionMatrix * vec4(p, 1.0);
}
